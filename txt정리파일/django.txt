**새 프로젝트 만들 때 과정

1. 가상환경 생성
python -m venv venv
venv(virtual environment) : 가상환경 만드는 명령어
2번째 venv 는 가상환경 이름

2. 설정
ctrl + shift + p, interpreter 검색하고 venv 선택
이때 주의사항
터미널 삭제하고 다시켜야 venv 생성됨
또는 
source venv/Scripts/activate : 가상환경에 들어가려면 앞에 source 쳐야함
deactivate : 나갈때

3. 장고설치
pip install django==3.2.15

4. 패키지목록 업데이트( 뭐 설치했을 때 항상 업데이트 해줘야함 )
pip freeze > requirements.txt

5. 프로젝트 생성
django-admin startproject crud . (맨 뒤에 쩜 찍는 거 주의하기!!!)

6. 앱 생성
python manage.py startapp articles

7. 앱 등록(settings에서 하는거임)
INSTALLED APPS에 articles 추가하기



** 장고 파일 풀 받아서 열 때 해야할 작업들

1. 가상환경 생성
python -m venv venv
venv(virtual environment) : 가상환경 만드는 명령어
2번째 venv 는 가상환경 이름

2. 설정
ctrl + shift + p, interpreter 검색하고 venv 선택
이때 주의사항
터미널 삭제하고 다시켜야 venv 생성됨
또는 
source venv/Scripts/activate : 가상환경에 들어가려면 앞에 source 쳐야함
deactivate : 나갈때

3. pip install -r requirements.txt 하면 관련된 프로그램들? 설치됨




%% python manage.py runserver 서버실행하는 명령어
%% pip install -r requirements.txt 하면 관련된 프로그램들? 설치됨


부트스트랩 CDN
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>


실습 편의를 위한 추가 라이브러리 설치 및 설정(0830 p.73)
pip install ipython
pip install django-extensions
pip freeze > requirements.txt (패키지 목록 업데이트)
settings.py 에서 INSTALLED_APPS 에서 'django_extensions' 되어있는지 확인하기


DB 입력할 때
python manage.py shell_plus


DB 입력할 때
1. 설계도작성
python manage.py makemigrations
2. 만든 설계도를 DB에 최종적으로 보냄
python manage.py migrate


** URL 분리작업
1. 프로젝트 urls.py 에서 import include
2. path('accounts/', include('accouts.urls')), 이런식으로 수정
3. 각 앱의 urls.py 에서 from . import views
4. app_name = 'accounts'
5. urlpatterns = [

] 만들어놓기!!
6. 각 앱의 templates 에 따로 앱 이름과 같은 파일 생성하기!!

** templates 폴더를 기존 프로젝트와 앱과 같은 위치에 놓기위해서는
templates 와 그 안에 base.html 만든후에
settings.py - TEMPLATES 에서 'DIRS': [BASE_DIR / 'templates',], 로 수정하기!!

** ImageField 사용하려면 Pillow 라이브러리 필요
pip install Pillow
python manage.py makemigrations
python manage.py migrate
pip freeze > requirements.txt

** 이미지업로드할때
1. enctype 써야함
<form action="{% url 'restaurants:create' %}" method="POST" enctype="multipart/form-data">
2. views.py 에서 create 함수에서 request.FILES 적어야함
form = RestaurantForm(request.POST, request.FILES)

*
<div class="d-flex justify-content-center">  {# 카드를 중간으로 놔두는 방법!!!! #}

* 
준비된 fixtures json 파일 가져오기
migrate 후
python manage.py loaddata <json파일이름>

*
코스 설치
https://github.com/adamchainz/django-cors-headers
깃허브 들어가서 보면 됨. 장고에서 설치하는거임!!
python -m pip install django-cors-headers
settings.py 에서 INSTALLED_APPS 에 
'corsheaders' 추가
MIDDLEWARE 에 
 "corsheaders.middleware.CorsMiddleware", 이거 추가!! 밑에꺼 위에다가!!
 "django.middleware.common.CommonMiddleware",
